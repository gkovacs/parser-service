// Generated by IcedCoffeeScript 1.4.0b

/*
parse = '''
(
  (S
    (NP
      (DT the)
      (NN cat)
    )
    (VP
      (VBD ate)
    )
  )
)'''
*/


(function() {
  var getChildren, getConstituents, getParseConstituents, hierarchyToTerminals, parseToHierarchy, refparse, subHierarchies, terminals;

  refparse = '( (CP (IP (NP (PN 你们)) (VP (VV 记得) (NP (CP (IP (VP (NP (NT 昨天)) (VP (VV 做)))) (DEC 的)) (NP (NN 事))))) (SP 吗)) )';

  terminals = function(s, lang) {
    var c, current_terminal, last_paren_type, output, tag, terminal, to_print, _i, _len, _ref;
    output = [];
    current_terminal = [];
    for (_i = 0, _len = s.length; _i < _len; _i++) {
      c = s[_i];
      if (c === '(') {
        last_paren_type = '(';
        current_terminal = [];
      } else if (c === ')') {
        if (last_paren_type === '(') {
          if (current_terminal.length > 0) {
            to_print = current_terminal.join('');
            _ref = to_print.split(' '), tag = _ref[0], terminal = _ref[1];
            output.push(terminal);
          }
        }
        last_paren_type = ')';
        current_terminal = [];
      } else {
        current_terminal.push(c);
      }
    }
    if (lang === 'zh') return output.join('');
    return output.join(' ');
  };

  getChildren = function(s) {
    var c, children, curchild, depth, _i, _len;
    curchild = [];
    children = [];
    depth = 0;
    for (_i = 0, _len = s.length; _i < _len; _i++) {
      c = s[_i];
      if (c === '(') depth += 1;
      if (depth >= 2) curchild.push(c);
      if (c === ')') {
        depth -= 1;
        if (depth === 1) {
          children.push(curchild.join(''));
          curchild = [];
        }
      }
    }
    return children;
  };

  getParseConstituents = function(parse, lang) {
    var agenda, child, childt, current, curt, output, _i, _len, _ref;
    output = {};
    agenda = [parse];
    while (agenda.length > 0) {
      current = agenda.pop(0);
      _ref = getChildren(current);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        agenda.push(child);
        curt = terminals(current, lang);
        childt = terminals(child, lang);
        if (curt !== childt) {
          if (output[curt] == null) output[curt] = [];
          output[curt].push(childt);
        }
      }
    }
    return output;
  };

  getConstituents = function(parse, lang) {
    return {};
  };

  parseToHierarchy = function(parse, lang) {
    var children, output, _i, _len, _ref;
    output = [];
    _ref = getChildren(parse);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      children = _ref[_i];
      output.push(parseToHierarchy(children, lang));
    }
    if (output.length === 1) return output[0];
    if (output.length === 0) return terminals(parse, lang);
    return output;
  };

  hierarchyToTerminals = function(hierarchy, lang) {
    var children, x;
    if (typeof hierarchy === typeof []) {
      children = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = hierarchy.length; _i < _len; _i++) {
          x = hierarchy[_i];
          _results.push(hierarchyToTerminals(x, lang));
        }
        return _results;
      })();
      if (lang === 'zh') {
        return children.join('');
      } else {
        return children.join(' ');
      }
    } else {
      return hierarchy;
    }
  };

  subHierarchies = function(hierarchy) {
    var agenda, current, output, x, _i, _len;
    output = [];
    agenda = [hierarchy];
    while (agenda.length > 0) {
      current = agenda.pop(0);
      output.push(current);
      if (typeof current === typeof []) {
        for (_i = 0, _len = current.length; _i < _len; _i++) {
          x = current[_i];
          agenda.push(x);
        }
      }
    }
    return output;
  };

  console.log(parseToHierarchy(refparse, 'zh'));

}).call(this);
