// Generated by IcedCoffeeScript 1.4.0b
(function() {
  var app, child_process, express, getUrl, http, httpserver, iced, parserResponsesNeeded, parsers, portnum, querystring, restler, segmenter, segmenterResponsesNeeded, terminals, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  child_process = require('child_process');

  restler = require('restler');

  querystring = require('querystring');

  portnum = 3555;

  getUrl = function(url, params, callback) {
    var paramstring, realurl;
    paramstring = querystring.stringify(params);
    if (url.indexOf('/') === -1) url = 'http://localhost:' + portnum + '/' + url;
    if (paramstring === '') {
      realurl = url;
    } else {
      realurl = url + '?' + paramstring;
    }
    return restler.get(realurl).on('complete', function(httpgetresponse) {
      return callback(httpgetresponse);
    });
  };

  parsers = {};

  parsers['zh'] = child_process.spawn('/bin/sh', ['-c', 'stdbuf -oL cat | java -mx2g -jar BerkeleyParser-1.7.jar -chinese -gr chn_sm5.gr']);

  parsers['en'] = child_process.spawn('/bin/sh', ['-c', 'stdbuf -oL cat | java -mx2g -jar BerkeleyParser-1.7.jar -gr eng_sm6.gr']);

  parsers['fr'] = child_process.spawn('/bin/sh', ['-c', 'stdbuf -oL cat | java -mx2g -jar BerkeleyParser-1.7.jar -gr fra_sm5.gr']);

  parsers['de'] = child_process.spawn('/bin/sh', ['-c', 'stdbuf -oL cat | java -mx2g -jar BerkeleyParser-1.7.jar -gr ger_sm5.gr']);

  segmenter = child_process.spawn('/bin/sh', ['-c', 'stdbuf -oL cat | java -mx2g -cp u/nlp/distrib/stanford-segmenter-2012-11-11/seg.jar edu.stanford.nlp.ie.crf.CRFClassifier -sighanCorporaDict u/nlp/distrib/stanford-segmenter-2012-11-11/data -sighanPostProcessing true -loadClassifier u/nlp/distrib/stanford-segmenter-2012-11-11/data/ctb.gz -serDictionary u/nlp/distrib/stanford-segmenter-2012-11-11/data/dict-chris6.ser.gz -testFile /dev/stdin']);

  segmenterResponsesNeeded = {};

  if (segmenter != null) {
    segmenter.stdout.on('data', function(data) {
      var query, result;
      result = data.toString().trim();
      query = result.split(' ').join('').trim();
      if (segmenterResponsesNeeded[query] != null) {
        segmenterResponsesNeeded[query](data);
        delete segmenterResponsesNeeded[query];
      }
      return console.log('segstdout: ' + data);
    });
    segmenter.stderr.on('data', function(data) {
      return console.log('segstderr: ' + data);
    });
  }

  terminals = function(s) {
    var c, current_terminal, last_paren_type, output, tag, terminal, to_print, _i, _len, _ref;
    output = [];
    current_terminal = [];
    for (_i = 0, _len = s.length; _i < _len; _i++) {
      c = s[_i];
      if (c === '(') {
        last_paren_type = '(';
        current_terminal = [];
      } else if (c === ')') {
        if (last_paren_type === '(') {
          if (current_terminal.length > 0) {
            to_print = current_terminal.join('');
            _ref = to_print.split(' '), tag = _ref[0], terminal = _ref[1];
            output.push(terminal);
          }
        }
        last_paren_type = ')';
        current_terminal = [];
      } else {
        current_terminal.push(c);
      }
    }
    return output.join('').split(' ').join('').trim();
  };

  parserResponsesNeeded = {};

  (function() {
    var lang, parser, _results;
    _results = [];
    for (lang in parsers) {
      parser = parsers[lang];
      parserResponsesNeeded[lang] = [];
      _results.push((function(lang, parser) {
        parser.stdout.on('data', function(data) {
          var curCallback, result;
          result = data.toString().trim();
          console.log(parserResponsesNeeded[lang]);
          if (parserResponsesNeeded[lang].length > 0) {
            curCallback = parserResponsesNeeded[lang].shift();
            curCallback(result);
          }
          return console.log('parserstdout: ' + result);
        });
        return parser.stderr.on('data', function(data) {
          return console.log('parserstderr: ' + data);
        });
      })(lang, parser));
    }
    return _results;
  })();

  express = require('express');

  app = express();

  http = require('http');

  httpserver = http.createServer(app);

  httpserver.listen(portnum);

  app.get('/', function(req, res) {
    return res.end('either segment or parse');
  });

  app.get('/segment', function(req, res) {
    var query, sentence;
    sentence = req.query['sentence'];
    if (sentence != null) {
      query = sentence.split(' ').join('').trim();
      segmenterResponsesNeeded[query] = function(segmented) {
        if (segmented != null) return res.end(segmented);
      };
      return segmenter.stdin.write(query + '\n\n\n\n');
    } else {
      return res.end('need to provide sentence parameter');
    }
  });

  app.get('/parseNoSegment', function(req, res) {
    var lang, query, sentence, _ref;
    sentence = req.query.sentence;
    if (sentence == null) {
      res.end('need to provide sentence parameter');
      return;
    }
    lang = (_ref = req.query.lang) != null ? _ref : 'en';
    query = sentence.split(' ').join('').trim();
    console.log(lang);
    console.log(query);
    parserResponsesNeeded[lang].push(function(parsed) {
      if (parsed != null) return res.end(parsed);
    });
    return parsers[lang].stdin.write(sentence + '\n');
  });

  app.get('/parse', function(req, res) {
    var lang, parsed, segmented, sentence, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    sentence = req.query.sentence;
    if (sentence == null) {
      res.end('need to provide sentence parameter');
      return;
    }
    lang = (_ref = req.query.lang) != null ? _ref : 'en';
    if (lang !== 'zh') {
      if (parsers[lang] == null) lang = 'zh';
      getUrl('parseNoSegment', {
        'lang': lang,
        'sentence': sentence
      }, function(parsed) {
        return res.end(parsed);
      });
      return;
      return __iced_k();
    } else {
      console.log('sentence is:' + sentence);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "parser.coffee"
        });
        getUrl('segment', {
          'lang': lang,
          'sentence': sentence
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return segmented = arguments[0];
            };
          })(),
          lineno: 145
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log('newly segmented sentence:' + segmented);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "parser.coffee"
          });
          getUrl('parseNoSegment', {
            'lang': lang,
            'sentence': segmented
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return parsed = arguments[0];
              };
            })(),
            lineno: 148
          }));
          __iced_deferrals._fulfill();
        })(function() {
          console.log('parsed output:' + parsed);
          if (typeof parsed !== "undefined" && parsed !== null) res.end(parsed);
          return;
          return __iced_k();
        });
      });
    }
  });

}).call(this);
